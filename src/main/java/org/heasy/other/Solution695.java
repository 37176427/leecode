package org.heasy.other;

/**
 * 描述 :给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。
 *
 * 找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)
 *
 * 示例 1:
 *
 * [[0,0,1,0,0,0,0,1,0,0,0,0,0],
 *  [0,0,0,0,0,0,0,1,1,1,0,0,0],
 *  [0,1,1,0,1,0,0,0,0,0,0,0,0],
 *  [0,1,0,0,1,1,0,0,1,0,1,0,0],
 *  [0,1,0,0,1,1,0,0,1,1,1,0,0],
 *  [0,0,0,0,0,0,0,0,0,0,1,0,0],
 *  [0,0,0,0,0,0,0,1,1,1,0,0,0],
 *  [0,0,0,0,0,0,0,1,1,0,0,0,0]]
 * 对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。
 *
 * 示例 2:
 *
 * [[0,0,0,0,0,0,0,0]]
 * 对于上面这个给定的矩阵, 返回 0。
 *
 * 注意: 给定的矩阵grid 的长度和宽度都不超过 50。
 * 链接：https://leetcode-cn.com/problems/max-area-of-island
 * 作者 : wyh
 * 时间: 2020-03-15 17:42
 */
public class Solution695 {

	/**
	 * 超级简单的DFS思想。也叫做沉岛思想。可以解决任何此类问题
	 */
	public int maxAreaOfIsland(int[][] grid) {
		if(grid==null) {
			return 0;
		}
		int m = 0;
		for(int i=0;i<grid.length;i++){
			for(int j=0;j<grid[i].length;j++){
				if(grid[i][j]==1){
					m = Math.max(m,dfs(grid,i,j));
				}
			}
		}
		return m;
	}

	private int dfs(int[][] grid,int i,int j){
		if(i<0 || j<0 || i>grid.length-1 || j>grid[i].length-1 || grid[i][j]==0 ) {
			return 0;
		}
		// 每次调用的时候默认num为1，进入后判断如果不是岛屿，则直接返回0，就可以避免预防错误的情况。
		// 每次找到岛屿，则直接把找到的岛屿改成0，这是传说中的沉岛思想，就是遇到岛屿就把他和周围的全部沉默。
		// ps：如果能用沉岛思想，那么自然可以用朋友圈思想。有兴趣的朋友可以去尝试。
		int m = 1;
		grid[i][j]=0;
		m += dfs(grid,i+1,j);
		m += dfs(grid,i,j+1);
		m += dfs(grid,i-1,j);
		m += dfs(grid,i,j-1);
		return m;
	}
}
